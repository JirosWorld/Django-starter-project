name: Code quality checks

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - stable/*
    tags:
    paths:
      - '**.py'
      - '**.json'
      - '**.yaml'
      - '**.in'
  pull_request:
    paths:
      - '**.py'
      - '**.json'
      - '**.yaml'
      - '**.in'
  workflow_dispatch:

jobs:
  isort:
    name: Check import sorting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      # - name: Install OS dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl
      - uses: isort/isort-action@v0.1.0
        with:
          requirementsFiles: requirements/ci.txt
          sortPaths: 'src docs'
          configuration: '--check-only --diff'

  black:
    name: Check code formatting with black
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      # - name: Install OS dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl
      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt
      - name: Run black
        run: |
          black --check src docs

  flake8:
    name: Code style (flake8)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      # - name: Install OS dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl
      - name: Install dependencies
        run: |
          pip install -r requirements/ci.txt
      - name: Run flake8
        id: flake8
        run: |
          flake8 src 2>&1 | tee flake8_output.txt
          result_code=${PIPESTATUS[0]}
          report="$(cat flake8_output.txt)"
          report="${report//$'\n'/'%0A'}"  # escape newlines
          echo "::set-output name=flake8_output::${report}"
          exit $result_code
      - name: Emit flake8 flake8 output
        if: ${{ failure() }}
        run: |
          echo "${{ steps.flake8.outputs.flake8_output }}"

          echo 'flake8 found some issues' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| File | Line | Column | Issue |' >> $GITHUB_STEP_SUMMARY
          echo '| :--- | ---- | ------ | :---- |' >> $GITHUB_STEP_SUMMARY
          python ./bin/flake8_summary.py "${{ steps.flake8.outputs.flake8_output }}" >> $GITHUB_STEP_SUMMARY
